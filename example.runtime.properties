# -----------------------------------------------------------------------------
#
# VIVO runtime properties
#
# This file is provided as example.runtime.properties.
#
# Save a copy of this file as runtime.properties in your Vitro home directory, 
# and edit the properties as needed for your installation.
#
# -----------------------------------------------------------------------------

# 
# This namespace will be used when generating URIs for objects created in the 
# editor. In order to serve linked data, the default namespace must be composed 
# as follows (optional elements in parentheses):
#
# scheme + server_name (+ port) (+ servlet_context) + "/individual/"
# 
# For example, Cornell's default namespace is:
#
# http://vivo.cornell.edu/individual/
#
Vitro.defaultNamespace = http://vivo.mydomain.edu/individual/

# 
# URL of Solr context used in local VIVO search. This will usually consist of:
#     scheme + server_name + port + vivo_webapp_name + "solr"
# In the standard installation, the Solr context will be on the same server as VIVO,
# and in the same Tomcat instance. The path will be the VIVO webapp.name (specified
# above) + "solr"
#   Example:
#     vitro.local.solr.url = http://localhost:8080/vivosolr
vitro.local.solr.url = http://localhost:8080/vivosolr

#
# Email parameters which VIVO can use to send mail. If these are left empty, 
# the "Contact Us" form will be disabled and users will not be notified of
# changes to their accounts.
#
email.smtpHost = smtp.mydomain.edu
email.replyTo = vivoAdmin@mydomain.edu

#
# The basic parameters for a database connection. Change the end of the 
# URL to reflect your database name (if it is not "vitrodb"). Change the username 
# and password to match the authorized database user you created.
#
VitroConnection.DataSource.url = jdbc:mysql://localhost/vitrodb?useUnicode=true&characterEncoding=utf-8
VitroConnection.DataSource.username = vitrodbUsername
VitroConnection.DataSource.password = vitrodbPassword

#
# The maximum number of active connections in the database connection pool.
# Increase this value to support a greater number of concurrent page requests.
#
VitroConnection.DataSource.pool.maxActive = 40

#
# The maximum number of database connections that will be allowed
# to remain idle in the connection pool.  Default is 25%
# of the maximum number of active connections.
#
VitroConnection.DataSource.pool.maxIdle = 10

#
# Parameters to change in order to use VIVO with a database other than 
# MySQL.
#
VitroConnection.DataSource.dbtype = MySQL
VitroConnection.DataSource.driver = com.mysql.jdbc.Driver
VitroConnection.DataSource.validationQuery = SELECT 1

#
# Optional URI of a SPARQL endpoint from which VIVO should display data. 
# If set, VIVO will use this endpoint as its triple store instead of the
# SDB database.
# 
#VitroConnection.DataSource.endpointURI =

#
# Optional URI to use for modifying the above endpoint via SPARQL UPDATE.
# This setting is only necessary if the endpoint does not support updates via
# its main URI.  (This may be done for access control purposes.)
# If the endpointURI above is not set, this setting has no effect.
#
#VitroConnection.DataSource.updateEndpointURI =

#
# The email address of the root user for the VIVO application. The password 
# for this user is initially set to "rootPassword", but you will be asked to 
# change the password the first time you log in.
#
rootUser.emailAddress = vivo_root@mydomain.edu

#
# How is a logged-in user associated with a particular Individual? One way is 
# for the Individual to have a property whose value is the username of the user.
# This value should be the URI for that property.
#
selfEditing.idMatchingProperty = http://vivo.mydomain.edu/ns#networkId

#
# If an external authentication system like Shibboleth or CUWebAuth is to be
# used, these properties say how the login button should be labeled, and which
# HTTP header will contain the user ID from the authentication system. If such
# a system is not to be used, leave these commented out. Consult the 
# installation instructions for more details. 
#
#externalAuth.buttonText = Log in using BearCat Shibboleth
#externalAuth.netIdHeaderName = remote_userID 

#
# The temporal graph visualization can require extensive machine resources.
# This can have a particularly noticeable impact on memory usage if
# - The organization tree is deep,
# - The number of grants and publications is large.
# VIVO 1.3 release mitigates this problem by the way of a caching mechanism & 
# hence we can safely set this to be enabled by default.
#
visualization.temporal = enabled 

#
# The temporal graph visualization is used to compare different organizations/people
# within an organization on parameters like number of publications or grants.
# By default, the app will attempt to make its best guess at the top level
# organization in your instance. If you're unhappy with this selection, uncomment out
# the property below and set it to the URI of the organization individual you want to
# identify as the top level organization. It will be used as the default whenever the
# temporal graph visualization is rendered without being passed an explicit org.
# For example, to use "Ponce School of Medicine" as the top organization:
# visualization.topLevelOrg = http://vivo.psm.edu/individual/n2862
#
# visualization.topLevelOrg = http://vivo.mydomain.edu/individual/topLevelOrgURI

#
# Absolute path on the server of the Harvester root directory.
# You must include the final slash.
# Setting a value for harvester.location indicates that the Harvester is installed at
# this path. This will enable the Harvester functions in the Ingest Tools page.
#
# harvester.location = /usr/local/vivo/harvester/

#
# Default type(s) for Google Refine Reconciliation Service
# The format for this property is id, name; id1, name1; id2, name2 etc.
# See Service Metadata from this page http://code.google.com/p/google-refine/wiki/ReconciliationServiceApi
# for more information.
Vitro.reconcile.defaultTypeList = http://vivoweb.org/ontology/core#Role, core:Role; http://vivoweb.org/ontology/core#AcademicDegree, core:Academic Degree; http://purl.org/NET/c4dm/event.owl#Event, event:Event; http://vivoweb.org/ontology/core#Agreement, core:Agreement; http://vivoweb.org/ontology/core#Location, core:Location; http://xmlns.com/foaf/0.1/Organization, foaf:Organization; http://xmlns.com/foaf/0.1/Person, foaf:Person; http://vivoweb.org/ontology/core#InformationResource, core:Information Resource

#
# Types of individual for which we can create proxy editors.
# If this is omitted, defaults to http://www.w3.org/2002/07/owl#Thing
#
proxy.eligibleTypeList = http://xmlns.com/foaf/0.1/Person, http://xmlns.com/foaf/0.1/Organization

#
# Show only the most appropriate data values based on the Accept-Language 
# header supplied by the browser.  Default is true if not set.
#
RDFService.languageFilter = true

#
# Force VIVO to use a specific language or Locale instead of those 
# specified by the browser. This affects RDF data retrieved from the model, 
# if RDFService.languageFilter is true. This also affects the text of pages
# that have been modified to support multiple languages. 
#
# languages.forceLocale = en_US

#
# A list of supported languages or Locales that the user may choose to
# use instead of the one specified by the browser. Selection images must
# be available in the i18n/images directory of the theme. This affects 
# RDF data retrieved from the model, if RDFService.languageFilter is true.  
# This also affects the text of pages that have been modified to support 
# multiple languages. 
#
# This should not be used with languages.forceLocale, which will override it.
#
# languages.selectableLocales = en, es, fr

#
# For developers only: Setting this option to "true" slows down VIVO performance.
#
# Defeat the Freemarker template cache, so each template is read from disk 
# on each request. This permits developers to immediately see the effect of 
# changes to the template. The default is <code>false</code>, which means 
# that a cached copy of each template will be used for 60 seconds before 
# the disk is checked for a new version.
#
# developer.defeatFreemarkerCache = true

#
# For developers only: Setting this option to "true" slows down VIVO performance.
#
# Defeat the cache of language-specific text strings, so the language file 
# is read from disk on each request. This permits developers to immediately
# see the effect of changes to the text strings. The default is 
# <code>false</code>, which means that the language file is read when 
# VIVO starts up, or when a new theme is selected.
#
# developer.defeatI18nCache = true

#
# For developers only: Setting this option to "true" slows down VIVO performance.
#
# Add starting and ending delimiters to each Freemarker template, so you can see
# which template were invoked by viewing the generated HTML. The default is 
# <code>false</code>.
#
# developer.insertFreemarkerDelimiters = true

#
# For OpenSocial integration
# The base URL of the ORNG Shindig server. Usually, this is the same host and port
# number as VIVO iteself, with a context path of "shindigorng".
#
#OpenSocial.shindigURL = http://localhost:8080/shindigorng 

#
# For OpenSocial integration
# The host name and port number of the service that provides security tokens for VIVO and
# Shindig to share. For now, the host name must be the actual host, not "localhost" or "127.0.0.1"
# The port number must be 8777
#
#OpenSocial.tokenService = myhost.mydomain.edu:8777

#
# For OpenSocial integration
# The path to the key file that will be used qwhen generating security tokens for VIVO and 
# shindig to share.
#
#OpenSocial.tokenKeyFile = /usr/local/vivo/data/shindig/openssl/securitytokenkey.txt

#
# For OpenSocial integration
# Only set sandbox to True for dev/test environments.  Comment out or set to False in production
#
#OpenSocial.sandbox = True

# MultiViews 
# VIVO supports the simultaneous use of a full foaf:Person profile page view and a "quick" page view that emphasizes
# the individual's webpage presence. The following flag should be uncommented when implementing the multiple
# views. 
#MultiViews.profilePageTypes=enabled
